// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[]
    education     Education?
    experience    Experience?
    about         About?
    socialLinks   SocialLink?
    skills        Skill[]
    contact       Contact?
    points        Int       @default(0)
    comments      Comment[]
    likes         Like[]
    followedBy    User[]     @relation("UserFollows")
    followings    User[]     @relation("UserFollows")
    communities   Community[] @relation("CommunityMembers")
    messagesSent  Message[]  @relation("MessagesSent")
    messagesReceived Message[] @relation("MessagesReceived")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
model Community{
    id String @id @default(cuid())
    name String
    description String? @db.Text
    slug String? @unique
    permissions Permission[]
    members User[] @relation("CommunityMembers")
    messages      Message[]  @relation("CommunityMessages")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Message {
  id            String      @id @default(cuid())
  text          String?
  sender        User        @relation("MessagesSent", fields: [senderId], references: [id])
  senderId      String
  recipient     User?       @relation("MessagesReceived", fields: [recipientId], references: [id])
  recipientId   String?
  community     Community?  @relation("CommunityMessages",fields: [communityId], references: [id])
  communityId   String?
  createdAt     DateTime   @default(now())
  @@index([senderId])
  @@index([recipientId])
  @@index([communityId])
}

model Permission{
    id String @id @default(cuid())
    name String? 
    role role @default(MEMBER)
    communityId String
    community   Community   @relation(fields: [communityId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([communityId])
}
enum role{
    ADMIN
    MODERATOR
    MEMBER
}
model Post {
  id            String  @id @default(cuid())
  title         String  @unique
  description   String  @db.Text
  slug          String?  @unique
  featuredImage String?
  text String? @db.Text
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comments  Comment[]
  likes     Like[]
  @@index([authorId])
}
model Comment {
  id String @id @default(cuid())
  text String @db.Text
  userId String
  postId String?
  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  post   Post?   @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([postId])
}
model Like {
  id String @id @default(cuid())
  userId String
  postId String?
  projectId String?
  project   Project?   @relation(fields: [projectId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  post   Post?   @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, postId])
  @@index([postId])
}
model Project{
    id String @id @default(cuid())
    title String
    description String? @db.Text
    slug String? @unique
    link String?
    videoLink String?
    comments  Comment[]
    likes     Like[]
    image String?
    teamMembers TeamMember[]
    snapshot String?
    technologies String[]
    problemItSolves String? @db.Text
    blogPostLink String? 
    userId String
    user   User   @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model TeamMember{
    id String @id @default(cuid())
    name String?
    role String?
    projectId String
    project   Project   @relation(fields: [projectId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([projectId])
}
model Education{
    id String @id @default(cuid())
    formalEducation Boolean @default(true)
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
    currentcollege String?
    degree String?
    fieldofstudy String?
    startDate String?
    endDate String?
    description String? @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model Experience{
    id String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
    company String?
    position String?
    resume  String?
    startDate String?
    endDate String?
    description_how_you_describe_yourself String? @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model About{
    id String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
    description String? @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model SocialLink{
    id String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
    github String?
    linkedin String?
    twitter String?
    instagram String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model Contact{
    id String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id])
    email String?
    phone String?
    address String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}
model Skill{
    id String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])
    name String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([userId])
}

